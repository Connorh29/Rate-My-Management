@page "/company/location/{Id}"
@using ClaimTypes = RateMyManagement.Data.ClaimTypes
@inject ILocationService locationService
@inject ICompanyService companyService
@inject UserManager<ApplicationUser> userManager
@if (_company != null)
{
    <PageTitle>@(_company.Name + " " + _location.City)</PageTitle>
    <div class="d-flex flex-column align-items-center">
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; width: -webkit-fill-available;">
            <div style="margin: 10px;">
                <RadzenCard>Overall Rating: @_location.GetRating().ToString("0.00")</RadzenCard>
                <RatingChart Ratings="@_location.LocatioReviews.Select(x => x.Stars)"></RatingChart>
            </div>
            <div class="d-flex flex-column align-items-center">
                <img style="height: 10em; width: 10em; border-radius: 50%" src="@_company.GetLogoUrl()"/>
                <h1 align="center">@_company.Name</h1>
                <h3>@_company.Industry</h3>
                <p>@_company.Description</p>
                @if (!_editing)
                {
                    <p>@_location.City</p>
                    <p>@_location.Address</p>
                }
                else
                {
                    <RadzenTemplateForm Style="display: flex; flex-direction: column" TItem="Location" Data="_location" Submit="OnSaveLocationChanges">
                        <RadzenTextBox Style="font-size: 1rem;" Placeholder="City" @bind-Value="_location.City"></RadzenTextBox>
                        <RadzenTextBox Style="font-size: 1rem; margin-top: 0.5rem;" Placeholder="Address" @bind-Value="_location.Address"></RadzenTextBox>
                        <RadzenButton Style="margin-top: 1rem;" ButtonType="ButtonType.Submit">Save Changes</RadzenButton>
                    </RadzenTemplateForm>
                }
            </div>
            <div>
                <AuthorizeView Policy="@PolicyTypes.LocationManager.ToString()" Resource="_location">
                    <div style="display: flex; justify-content: end">
                        @if (_editing)
                        {
                            <img @onclick="@(() => _editing = !_editing)"
                                 style="height: 2em; width: 2em; border-radius: 50%; background: white; cursor: pointer; margin: 10px" src="\Images\Icons\Cancel.png">
                        }
                        else
                        {
                            <img @onclick="@(() => _editing = !_editing)"
                                 style="height: 2em; width: 2em; border-radius: 50%; background: white; cursor: pointer; margin: 10px" src="\Images\Icons\Edit.png">
                        }
                    </div>
                </AuthorizeView>
            </div>
        </div>
        <hr style="width: 100%"/>
        <RadzenMenu Click="@OnSortByClicked">
            <RadzenMenuItem Text="Sort by">
                <RadzenMenuItem Icon="hourglass_full" Text="Most Recent"></RadzenMenuItem>
                <RadzenMenuItem Icon="hourglass_empty" Text="Least Recent"></RadzenMenuItem>
                <RadzenMenuItem Icon="account_circle" Text="Sender Username"></RadzenMenuItem>
                <RadzenMenuItem Icon="face" Text="Employee Name" ></RadzenMenuItem>
            </RadzenMenuItem>
        </RadzenMenu>
        <LocationReviewForm LocationId="@_location.Id" LocationReview="@(new LocationReview())" SubmitCallback="OnSubmitReview"></LocationReviewForm>
        @foreach (var review in _location.LocatioReviews)
        {
            <LocationReviewComponent LocationReview="@review"></LocationReviewComponent>
        }
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Location _location { get; set; }
    private Company? _company { get; set; }
    private bool _editing;

    public string GetSource()
    {
        var test = _editing ? @"\Images\Icons\Cancel.png)" : @"\Images\Icons\Edit.png";
        return test;
    }
    protected override async Task OnInitializedAsync()
    {
        _location = await locationService.GetLocationAsync(Id);
        _company = await companyService.GetCompanyAsync(_location.Company.Id);
        _location.LocatioReviews = _location.LocatioReviews.OrderByDescending(x => DateTime.Parse(x.SentDateAndTime,  CultureInfo.InvariantCulture)).ToList();
    }
    private async Task OnSubmitReview()
    {
        await OnInitializedAsync();
    }
    private async Task OnSaveLocationChanges(Location location)
    {
        await locationService.SaveLocationAsync(location);
        _editing = !_editing;
    }

    private async Task MakeManager(ClaimsPrincipal claimsPrincipal)
    {
        var user = await userManager.GetUserAsync(claimsPrincipal);
        await userManager.AddClaimAsync(user, new Claim(ClaimTypes.EditLocation.ToString(), _location.Id));
    }
    private void OnSortByClicked(MenuItemEventArgs args)
    {
        switch (args.Text)
        {
            case "Most Recent":
                _location.LocatioReviews = _location.LocatioReviews.OrderByDescending(x => DateTime.Parse(x.SentDateAndTime, CultureInfo.InvariantCulture)).ToList();
                break;
            case "Least Recent":
                _location.LocatioReviews = _location.LocatioReviews.OrderBy(x => DateTime.Parse(x.SentDateAndTime, CultureInfo.InvariantCulture)).ToList();
                break;
            case "Sender Username":
                _location.LocatioReviews = _location.LocatioReviews.OrderBy(x => x.SenderUsername).ToList();
                break;
            case "Employee Name":
                _location.LocatioReviews = _location.LocatioReviews.OrderBy(x => x.ManagerName).ToList();
                break;
                
        }
        
    }
}
