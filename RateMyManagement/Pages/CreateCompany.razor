@page "/create/company/"
@inject ICompanyService companyService;
@layout MainLayoutWithSides
<div class="page-container">
    <RadzenCard Style="margin: 10px;">
        <RadzenTemplateForm TItem="Company" Data="@(new Company())">
            <div class="d-flex align-items-center">
                <h2 class="m-2">Name:</h2>
                <RadzenTextBox @bind-Value="_companyName" Name="name"></RadzenTextBox>
                <RadzenRequiredValidator Component="name" DefaultValue="@string.Empty"></RadzenRequiredValidator>
            </div>
            <div class="d-flex align-items-center">
                <h2 class="m-2">Industry:</h2>
                <RadzenTextBox @bind-Value="_companyIndustry" Name="industry"></RadzenTextBox>
                <RadzenRequiredValidator Component="industry" DefaultValue="@string.Empty"></RadzenRequiredValidator>
            </div>
            <div class="d-flex align-items-center">
                <h2 class="m-2">Description:</h2>
                <RadzenTextArea @bind-Value="_companyDescription" Name="description"></RadzenTextArea>
                <RadzenRequiredValidator Component="description" DefaultValue="@string.Empty"></RadzenRequiredValidator>
            </div>
            <div>
                <AddImage ImageUploaded="OnImageUploaded"></AddImage>
            </div>
            <div>
                <RadzenButton ButtonType="ButtonType.Submit" Click="CreateCompanyAsync">Submit</RadzenButton>
            </div>
            @if (_error)
            {
                <p style="color: red"</p>
            }
        </RadzenTemplateForm>
    </RadzenCard>
</div>
@code {

    [Parameter]
    public string query { get; set; }
    string _companyName = string.Empty;
    string _companyIndustry = string.Empty;
    string _companyDescription = string.Empty;
    string _companyLogoUrl { get; set; } = string.Empty;
    string _companyLogoDeleteUrl { get; set; } = string.Empty;
    public List<Company> CompaniesQueried { get; set; } = new List<Company>();
    string _errorMessage;
    bool _error;
    private async Task CreateCompanyAsync()
    {
        if (string.IsNullOrEmpty(_companyName) || string.IsNullOrEmpty(_companyDescription) ||
            string.IsNullOrEmpty(_companyIndustry))
        {
            return;
        }
        try
        {
            var company = new Company()
            {
                Id = Guid.NewGuid().ToString(),
                Name = _companyName,
                Industry = _companyIndustry,
                Description = _companyDescription,
                LogoDeleteUrl = _companyLogoDeleteUrl,
                LogoUrl = _companyLogoUrl
            };
            await companyService.SaveCompanyAsync(company);
            ResetForm();
        }
        catch (Exception e)
        {
            await DisplayError(e, 5000);
        }
    }

    private async Task DisplayError(Exception e, int lengthMili)
    {
        _error = true;
        _errorMessage = "Something went wrong: " + e.Message;
        StateHasChanged();
        await Task.Delay(lengthMili);
        _error = false;
        StateHasChanged();
    }

    private void ResetForm()
    {
        _companyName = string.Empty;
        _companyIndustry = string.Empty;
        _companyDescription = string.Empty;
        _companyLogoDeleteUrl = string.Empty;
        _companyLogoUrl = string.Empty;
    }

    public void OnImageUploaded(ImgbbUploadResponse info)
    {
        _companyLogoUrl = info.data.display_url;
        _companyLogoDeleteUrl = info.data.delete_url;
    }


}
