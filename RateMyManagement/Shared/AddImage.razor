@using RateMyManagement.IServices
@using RateMyManagement.Data
@inject IImageService _imageService;
<div class="d-flex flex-column align-items-center align-content-center">
    @if (_uploadResponse != null)
    {
        <img src="@_uploadResponse.data.display_url"/>
    }
    else if (_displayUrl != null)
    {
        <img src="@_displayUrl" />
    }
    @if (_error)
    {
        <p style="color: red">Error: @_errorMessage</p>
    }

    <InputFile OnChange="@LoadFiles"></InputFile>
</div>
@code {
    [Parameter] 
    public EventCallback<ImgbbUploadResponse> ImageUploaded { get; set; }
    private ImgbbUploadResponse? _uploadResponse;
    private string? _displayUrl;
    private bool _error;
    private string _errorMessage = string.Empty;
    private async Task LoadFiles(InputFileChangeEventArgs args)
    {
        if (args.File.Name.Split(".")[1] == "heic")
        {
            return;
        }
        try
        {
            using var mem = new MemoryStream();
            await args.File.OpenReadStream(15000000L).CopyToAsync(mem);
            var result = await _imageService.UploadImageAsync(mem.ToArray());
            if (result.success)
            {
                if (_uploadResponse != null)
                {
                    await DeleteImage(_uploadResponse.data.delete_url);
                }
                _uploadResponse = result; 
                await ImageUploaded.InvokeAsync(_uploadResponse);
            }
            else
            {
                _error = true;
                StateHasChanged();
                _errorMessage = "Something went wrong uploading the image";
                await Task.Delay(3000);
                _error = false;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error occured uploading image" + e.Message);
        }
    }
    private async Task DeleteImage(string url)
    {
        if (url != null)
        {
            await _imageService.DeleteImageAsync(url);

        }
    }

    public void SetImage(string url)
    {
        _displayUrl = string.IsNullOrWhiteSpace(url) ? null : url;
    }
    public async Task Reset(bool deleteImage)
    {
        if (deleteImage && _uploadResponse != null)
        {
            await DeleteImage(_uploadResponse.data.delete_url);
        }
        _uploadResponse = null;
    }
}
