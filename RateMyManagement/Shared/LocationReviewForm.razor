@inject ILocationService locationService;
@inject AuthenticationStateProvider authenticationStateProvider
<RadzenTemplateForm TItem="LocationReview" Data="LocationReview" Style="margin:10px; width: 95%;" Submit="@OnSubmitReview" >
    <RadzenCard>
        @if (!_creatingReview)
        {
            <AuthorizeView Context="context2" Policy="@PolicyTypes.AuthorizedUser.ToString()">
                <Authorized>
                    <div style="display: flex; justify-content: space-between">
                        <RadzenButton Click="@(() => _creatingReview = true)" Style="height: 3em;">Create review</RadzenButton>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div>
                        <RadzenButton Disabled="true">Create review</RadzenButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
        else
        {
            <div class="d-flex">
                <div class="d-flex flex-column align-items-center">
                    You Are?
                    <RadzenRadioButtonList Name="ReviewType" TValue="int" @bind-Value="Reviewtype">
                        <Items>
                            <RadzenRadioButtonListItem Text="Employee" Value="1"/>
                            <RadzenRadioButtonListItem Text="Customer" Value="2"/>
                        </Items>
                    </RadzenRadioButtonList>
                    <RadzenRequiredValidator Component="ReviewType" Text="Review type is required!" DefaultValue="0"/>
                    <div class="m-1">
                        <RadzenTextBox Disabled="true" Value="@_claimsPrincipal?.Identity?.Name"></RadzenTextBox>
                    </div>
                    <div class="m-1">
                        <RadzenRating Name="Rating" @bind-Value="LocationReview.Stars"></RadzenRating>
                        <RadzenRequiredValidator Component="Rating" Text="Review rating is required!" DefaultValue="0"/>
                    </div>
                    <div class="m-1">
                        <RadzenButton ButtonType="ButtonType.Submit">Submit</RadzenButton>
                    </div>
                    <div class="m-1">
                        <RadzenButton Click="@OnCancelCreateReview">Cancel</RadzenButton>
                    </div>
                </div>
                <div style="width: -webkit-fill-available; display: flex; flex-direction: column">
                    <div style="margin-bottom: 10px; display: flex;">
                        <RadzenTextBox Name="ManagerName" @bind-Value="LocationReview.ManagerName" Placeholder="Manager Name"></RadzenTextBox>
                        <RadzenRequiredValidator Component="ManagerName" Text="Manager name is required!" />
                        <RadzenDropDown TValue="string" Name="ManagerType" @bind-Value="_managerType" SelectedItemChanged="OnManagerTypeSelectionChange" Placeholder="Manager Type" Data="@ManagerTypes"></RadzenDropDown>
                        <RadzenRequiredValidator Component="ManagerType" Text="Manager type is required!" DefaultValue="@null"/>
                        <RadzenDropDown Multiple="true" Chips="true" MaxSelectedLabels="20" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@ManagerAttributes @bind-Value="MultipleAttributes"/>
                    </div>
                    <RadzenTextArea Name="ReviewContent" @bind-Value="LocationReview.Content" Placeholder="Review" Style="width: -webkit-fill-available; height: -webkit-fill-available"></RadzenTextArea>
                    <RadzenRequiredValidator   Component="ReviewContent" Text="Review message is required!" />
                </div>
            </div>
        }
    </RadzenCard>
</RadzenTemplateForm>
@code {

    [Parameter] public LocationReview LocationReview { get; set; } = new LocationReview();
    [Parameter] public string LocationId { get; set; }
    [Parameter] public EventCallback SubmitCallback { get; set; }
    private IEnumerable<string> _multiplateAttributes;
    public IEnumerable<string> MultipleAttributes
    {
        get { return _multiplateAttributes; }
        set
        {
            _multiplateAttributes = value;
            List<ManagerAttribute> temp = new List<ManagerAttribute>();
            foreach (var str in value)
            {
                ManagerAttribute val;
                if (str.MatchesEnumItem(out val))
                {
                    temp.Add(val);
                }
            }
            LocationReview.ManagerAttributes = temp;
        }
    }
    private bool _creatingReview;
    private List<string> ManagerTypes = ExtensionMethods.GetEnumNamesCorrected<ManagerType>();
    private List<string> ManagerAttributes = ExtensionMethods.GetEnumNamesCorrected<ManagerAttribute>();
    private ClaimsPrincipal _claimsPrincipal;

    private string _managerType;

    private int _reviewType;
    private int Reviewtype
    {
        get { return _reviewType; }
        set
        {
            _reviewType = value;
            OnReviewTypeChange(_reviewType);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        _claimsPrincipal = authState.User;
    }
    private void OnReviewTypeChange(int args)
    {
        LocationReview.Type = args == 1 ? ReviewType.Employee : ReviewType.Customer;
    }
    private void OnManagerTypeSelectionChange(object args)
    {
        var asString = args.ToString();
        ManagerType managerType;
        if (asString.MatchesEnumItem(out managerType))
        {
            LocationReview.ManagerType = managerType;
        }

    }

    private void OnCancelCreateReview()
    {
        ResetForm();
        _creatingReview = false;
    }
    private async Task OnSubmitReview()
    {
        LocationReview.SenderUsername = _claimsPrincipal.Identity.Name;
        await locationService.AddLocationReviewAsync(LocationId, LocationReview);
        ResetForm();
        _creatingReview = false;
        await SubmitCallback.InvokeAsync();
    }
    private void ResetForm()
    {
        LocationReview = new LocationReview();
        MultipleAttributes = new List<string>();
        _managerType = null;
        Reviewtype = 0;
    }
}
