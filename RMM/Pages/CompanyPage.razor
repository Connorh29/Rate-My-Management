@page "/company/{CompanyId}"
@using RMM.Data
@layout MainLayoutWithSides
@inject IMongoService mongoService;
@inject NavigationManager navManager;
@if (_company != null)
{
    <PageTitle>@_company.Name</PageTitle>
    <div class="flex-down page-container">
        <img src="@_company.GetLogoUrl()"/>
        <h1>@_company.Name</h1>
        <h3>@_company.Industry</h3>
        <p>@_company.Description</p>
        <hr/>
        <div class="locations-ratings">
            <div class="flex-down ratings">
                <h2>Company Rating</h2>
                <h1>
                    @_company.Rating
                </h1>
                @if (!_creatingReview)
                {
                    <RadzenButton Click="@(() => _creatingReview = true)">Create review</RadzenButton>
                }
                else
                {
                    <div class="m-1">
                        <RadzenTextArea @bind-Value="_reviewContent" Placeholder="Review"></RadzenTextArea>
                    </div>
                    <div class="m-1">
                        <RadzenTextBox Placeholder="Sendername" @bind-Value="_reviewUsername"></RadzenTextBox>
                    </div>
                    <div class="m-1">
                        <RadzenRating Change="@(OnRatingChange)"></RadzenRating>
                    </div>
                    <div class="m-1">
                        <RadzenButton Click="OnSubmitReview">Submit</RadzenButton>
                    </div>
                    <div class="m-1">
                        <RadzenButton Click="@(() => _creatingReview = false)">Cancel</RadzenButton>
                    </div>
                }
                @foreach (var review in _company.CompanyReviews)
                {
                    <RadzenCard Style="padding: 0px 10px; margin:10px; width: 95%;">
                        <div class="review">
                            <p>@review.SenderUsername</p>
                            <h1>@review.Stars</h1>
                            <p class="text">@review.Content</p>
                            <p class="review-date">@review.SentDateAndTime</p>
                        </div>
                    </RadzenCard>
                }
            </div>
            <div class="flex-down locations">
                <h2>
                    Locations
                </h2>
                <RadzenText>Missing Location?</RadzenText>
                @if (!_creatingLocation)
                {
                    <RadzenButton Click="@(() => _creatingLocation = true)">Create location</RadzenButton>
                }
                else
                {
                    <div class="m-1">
                        <RadzenTextBox @bind-Value="_locationAddress" Placeholder="Address"></RadzenTextBox>
                    </div>
                    <div class="m-1">
                        <RadzenTextBox Placeholder="City" @bind-Value="_locationCity"></RadzenTextBox>
                    </div>
                    <div class="m-1">
                        <RadzenButton Click="OnSubmitLocation">Submit</RadzenButton>
                    </div>
                    <div class="m-1">
                        <RadzenButton Click="@(() => _creatingLocation = false)">Cancel</RadzenButton>
                    </div>
                }
                @foreach (var location in _companyLocations)
                {
                    <RadzenCard Style="padding: 0px 10px; margin:10px; width: 95%; cursor: pointer;" @onclick="@(()=>Navaway(location.Id))">
                        <div class="review">
                            <p>@location.Address</p>
                            <p>@location.City</p>
                            <h1>@location.GetRating()</h1>
                        </div>
                    </RadzenCard>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CompanyId { get; set; }
    private Company _company;
    private List<Location> _companyLocations = new List<Location>();
    private bool _creatingReview;
    private bool _creatingLocation;

    private string _reviewContent;
    private string _reviewUsername;
    private int _reviewStars;

    private string _locationAddress;
    private string _locationCity;
    protected override async Task OnInitializedAsync()
    {
        await GetCompanyAsync();
        await GetCompanyLocationsAsync();
    }
    private async Task GetCompanyAsync()
    {
        var result = await mongoService.TryGetCompanyAsync(CompanyId);
        if (result.Item1)
        {
            _company = result.Item2;
        }
    }
    private async Task GetCompanyLocationsAsync()
    {
        _companyLocations.Clear();
        if (_company == null) return;
        foreach (var id in _company.LocationIds)
        {
            var result = await mongoService.TryGetLocationAsync(id);
            if (result.Item1)
            {
                _companyLocations.Add(result.Item2);
            }
        }
    }
    private void OnRatingChange(int value)
    {
        _reviewStars = value;
    }
    private async Task OnSubmitReview()
    {
        if (string.IsNullOrWhiteSpace(_reviewUsername) || string.IsNullOrWhiteSpace(_reviewContent)) return;
        var review = new Review()
        {
            SenderUsername = _reviewUsername,
            Content = _reviewContent, 
            Stars = _reviewStars
        };
        await mongoService.AddCompanyReviewAsync(_company.Id, review);
        await GetCompanyAsync();
        ResetReview();
    }
    private void ResetReview()
    {
        _reviewContent = string.Empty;
        _reviewUsername = string.Empty;
        _reviewStars = 0;
        _creatingReview = false;
    }
    private async Task OnSubmitLocation()
    {
        if (string.IsNullOrWhiteSpace(_locationAddress) || string.IsNullOrWhiteSpace(_locationCity)) return;
        var location = new Location()
        {
            CompanyId = _company.Id, 
            CompanyName = _company.Name, 
            Address = _locationAddress, 
            City = _locationCity
        };
        await mongoService.CreateLocationAsync(location);
        await mongoService.AddLocationIdToCompanyAsync(_company.Id, location.Id);
        await OnInitializedAsync();
        ResetLocation();
    }
    private void ResetLocation()
    {
        _locationAddress = string.Empty;
        _locationCity = string.Empty;
        _creatingLocation = false;
    }

    private void Navaway(string id)
    {
        var navto = $"/company/location/{id}";
        navManager.NavigateTo(navto);
    }

}
