@page "/company/{CompanyId}"
@using System.Security.Claims
@layout MainLayoutWithSides
@inject IMongoService mongoService;
@inject NavigationManager navManager;
@inject UserManager<ApplicationUser> userManager
@if (_company != null)
{
    <PageTitle>@_company.Name</PageTitle>
    <div class="flex-down page-container">
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; width: 100%; padding: 15px;">
            <div></div>
            <div style="display: flex; flex-direction: column; align-items: center;">
                @if (!_editing)
                {
                    <img src="@_company.GetLogoUrl()"/>
                    <h1>@_company.Name</h1>
                    <h3>@_company.Industry</h3>
                    <p>@_company.Description</p>
                }
                else
                {
                    <RadzenTemplateForm Style="display: flex; flex-direction: column; align-items: center" TItem="Company" Data="_company">
                        <RadzenText>Update Image</RadzenText>
                        <AddImage  @ref="_addImage" ImageUploaded="@OnImageUploaded"></AddImage>
                        <RadzenTextBox Placeholder="Name" Style="font-size: 1rem;" @bind-Value="_company.Name"></RadzenTextBox>
                        <RadzenTextBox Style="font-size: 1rem; margin-top: 0.5rem;" Placeholder="Industry" @bind-Value="_company.Industry" ></RadzenTextBox>
                        <RadzenTextBox Style="font-size: 1rem; margin-top: 0.5rem;" Placeholder="Description" @bind-Value="_company.Description" ></RadzenTextBox>
                        <RadzenButton Style="margin-top: 1rem;" Click="@(()=>OnCompanyChangesSaved(_company))">Save Changes</RadzenButton>
                    </RadzenTemplateForm>
                }
            </div>
            <div>
                <AuthorizeView Policy="@PolicyTypes.CompanyManager.ToString()" Resource="_company">
                    <div style="display: flex; justify-content: end">
                        @if (_editing)
                        {
                            <img @onclick="@OnStopEditing"
                         style="height: 2em; width: 2em; background: white; cursor: pointer; margin: 10px" src="\Images\Icons\Cancel.png">
                        }
                        else
                        {
                            <img @onclick="@OnBeginEditing"
                         style="height: 2em; width: 2em; background: white; cursor: pointer; margin: 10px" src="\Images\Icons\Edit.png">
                        }
                    </div>
                </AuthorizeView>
            </div>
        </div>
        <hr/>
        <div class="locations-ratings" style="display: flex; flex-direction: column; align-items: center; padding: 10px;">
            <div class="flex-down locations">
                <h2>
                    Locations
                </h2>
                <AuthorizeView Policy="@PolicyTypes.CompanyManager.ToString()" Resource="_company">
                    <Authorized>
                        <RadzenText>Missing Location?</RadzenText>
                        @if (!_creatingLocation)
                        {
                            <RadzenButton Click="@(() => _creatingLocation = true)">Create location</RadzenButton>
                        }
                        else
                        {
                            <div class="m-1">
                                <RadzenTextBox @bind-Value="_locationAddress" Placeholder="Address"></RadzenTextBox>
                            </div>
                            <div class="m-1">
                                <RadzenTextBox Placeholder="City" @bind-Value="_locationCity"></RadzenTextBox>
                            </div>
                            <div class="m-1">
                                <RadzenButton Click="OnSubmitLocation">Submit</RadzenButton>
                            </div>
                            <div class="m-1">
                                <RadzenButton Click="@(() => _creatingLocation = false)">Cancel</RadzenButton>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
                <div>
                    <RadzenTextBox Placeholder="Address" Style="margin-top: 10px;" @bind-Value="Query" ></RadzenTextBox>
                    <RadzenButton>Search</RadzenButton>

                </div>
                @foreach (var location in _queriedLocations)
                {
                    <RadzenCard Style="padding: 0px 10px; margin: 10px; width: 95%; cursor: pointer;" @onclick="@(() => Navaway(location.Id))">
                        <div class="review">
                            <p>@location.Address</p>
                            <p>@location.City</p>
                            <h1>@location.GetRating()</h1>
                        </div>
                    </RadzenCard>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CompanyId { get; set; }
    private Company _company;
    private List<Location> _companyLocations = new List<Location>();
    private List<Location> _queriedLocations = new List<Location>();
    private bool _creatingLocation;
    private bool _editing { get; set; }

    private AddImage? _addImage;

    private string _query = string.Empty;

    public string Query
    {
        get { return _query; }
        set
        {
            _query = value;
            _queriedLocations = _companyLocations.Where(x => x.Address.Contains(_query) || x.City.Contains(_query) ).ToList();
            if (string.IsNullOrWhiteSpace(_query))
            {
                _queriedLocations = _companyLocations;
            }
        }
    }

    private string _locationAddress;
    private string _locationCity;
    protected override async Task OnInitializedAsync()
    {
        await GetCompanyAsync();
        await GetCompanyLocationsAsync();
        _queriedLocations = _companyLocations;
    }
    private async Task GetCompanyAsync()
    {
        var result = await mongoService.TryGetCompanyAsync(CompanyId);
        if (result.Item1)
        {
            _company = result.Item2;
        }
    }
    private async Task GetCompanyLocationsAsync()
    {
        _companyLocations.Clear();
        if (_company == null) return;
        foreach (var id in _company.LocationIds)
        {
            var result = await mongoService.TryGetLocationAsync(id);
            if (result.Item1)
            {
                _companyLocations.Add(result.Item2);
            }
        }
    }
    private async Task OnSubmitLocation()
    {
        if (string.IsNullOrWhiteSpace(_locationAddress) || string.IsNullOrWhiteSpace(_locationCity)) return;
        var location = new Location()
        {
            CompanyId = _company.Id,
            Address = _locationAddress, 
            City = _locationCity
        };
        await mongoService.CreateLocationAsync(location);
        await mongoService.AddLocationIdToCompanyAsync(_company.Id, location.Id);
        await OnInitializedAsync();
        ResetLocation();
    }
    private void ResetLocation()
    {
        _locationAddress = string.Empty;
        _locationCity = string.Empty;
        _creatingLocation = false;
    }
    private void Navaway(string id)
    {
        var navto = $"/company/location/{id}";
        navManager.NavigateTo(navto);
    }
    private async Task OnCompanyChangesSaved(Company company)
    {
        await mongoService.UpdateCompanyDetailsAsync(company.Id, company.Name, company.Industry, company.Description);
        _editing = !_editing;
        await _addImage.Reset(false);
    }
    private async Task OnBeginEditing()
    {
        _editing = !_editing;
        await Task.Delay(2);
        _addImage.SetImage(_company.LogoUrl);
    }
    private async Task OnStopEditing()
    {
        _editing = !_editing;
        await _addImage.Reset(true);
    }
    private void OnImageUploaded(ImgbbUploadResponse response)
    {
        _company.LogoUrl = response.data.display_url;
        _company.LogoDeleteUrl = response.data.delete_url;
    }

}
